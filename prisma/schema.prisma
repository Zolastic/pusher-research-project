// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    userSections UserSection[]
    updates      Update[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserSection {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    section   Section @relation(fields: [sectionId], references: [id])
    sectionId String
}

model Part {
    id       String    @id @default(cuid())
    order    Int
    name     String
    sections Section[]
}

model Section {
    id           String        @id @default(cuid())
    order        Int
    name         String
    part         Part          @relation(fields: [partId], references: [id])
    partId       String
    userSections UserSection[]
    questions    Question[]
}

model Question {
    id        String  @id @default(cuid())
    order     Int
    question  String
    response  String
    done      Boolean @default(false)
    section   Section @relation(fields: [sectionId], references: [id])
    sectionId String

    updates Update[]
}

model Update {
    id               String   @id @default(cuid())
    userId           String
    dateTime         DateTime @default(now())
    questionId       String
    OrganisationName String

    user     User     @relation(fields: [userId], references: [id])
    question Question @relation(fields: [questionId], references: [id])
}
